// SYNTAX TEST "Packages/=BB= LSL/.sublime/syntaxes/LSL.sublime-syntax"

integer int_a = 0x1;
// <- storage.type
 // <- storage.type
//^^^^^ storage.type
//     ^ source.lsl
//      ^^^^^ variable.other
//           ^ source.lsl
//            ^ keyword.operator.assignment
//             ^ source.lsl
//              ^^^ constant.numeric.integer.hexadecimal
//                 ^ punctuation.terminator

integer int_b = -0x1;
// <- storage.type
 // <- storage.type
//^^^^^ storage.type
//     ^ source.lsl
//      ^^^^^ variable.other
//           ^ source.lsl
//            ^ keyword.operator.assignment
//             ^ source.lsl
//              ^^^^ constant.numeric.integer.hexadecimal
//                  ^ punctuation.terminator

integer int_c = 0X1;
// <- storage.type
 // <- storage.type
//^^^^^ storage.type
//     ^ source.lsl
//      ^^^^^ variable.other
//           ^ source.lsl
//            ^ keyword.operator.assignment
//             ^ source.lsl
//              ^^^ constant.numeric.integer.hexadecimal
//                 ^ punctuation.terminator

integer int_d = -0X1;
// <- storage.type
 // <- storage.type
//^^^^^ storage.type
//     ^ source.lsl
//      ^^^^^ variable.other
//           ^ source.lsl
//            ^ keyword.operator.assignment
//             ^ source.lsl
//              ^^^^ constant.numeric.integer.hexadecimal
//                  ^ punctuation.terminator

reassign()
{
    int_a = 0x1;
//          ^^^ constant.numeric.integer.hexadecimal
    int_b = -0x1;
//          ^^^^ constant.numeric.integer.hexadecimal
    int_c = 0X1;
//          ^^^ constant.numeric.integer.hexadecimal
    int_d = -0X1;
//          ^^^^ constant.numeric.integer.hexadecimal
}

default
{
    touch_start(integer num_detected)
    {
        reassign();
    }

    touch_end(integer num_detected)
    {
        int_a = 0x1;
//              ^^^ constant.numeric.integer.hexadecimal
        int_b = -0x1;
//              ^^^^ constant.numeric.integer.hexadecimal
        int_c = 0X1;
//              ^^^ constant.numeric.integer.hexadecimal
        int_d = -0X1;
//              ^^^^ constant.numeric.integer.hexadecimal

        if (TRUE)
        {
            int_a = 0x1;
//                  ^^^ constant.numeric.integer.hexadecimal
            int_b = -0x1;
//                  ^^^^ constant.numeric.integer.hexadecimal
            int_c = 0X1;
//                  ^^^ constant.numeric.integer.hexadecimal
            int_d = -0X1;
//                  ^^^^ constant.numeric.integer.hexadecimal
        }
    }
}
